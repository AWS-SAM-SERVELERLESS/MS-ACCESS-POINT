AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  access-ponit #magic___^_^___line Sample SAM Template for access-ponit #magic___^_^___line
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  stage:
    Type: String
    Default: DEV
    Description: "Name for the API Gateway"

Mappings:
  CorsConfig:
    DEV:
      AllowOrigin: "'*'"
      AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
    QA:
      AllowOrigin: "'https://myfrontend.com'"
      AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
    PROD:
      AllowOrigin: "'https://myfrontend.com'"
      AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"

Resources:
  eventBridgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "access-ponit-${stage}"
      CodeUri: src/controllers
      Environment:
        Variables:
          stage: !Ref stage
          idAcconut: !Ref AWS::AccountId
      Handler: AccessPoint.lambdaHandler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 10
      Architectures:
      - x86_64
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref MyApiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - AccessPoint.ts

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref stage
      Name: !Sub "access-ponit-${stage}"
      MethodSettings:
      - HttpMethod: "POST"
        ResourcePath: "/"
        ThrottlingRateLimit: 10
        ThrottlingBurstLimit: 20
      Cors:
        AllowMethods: !FindInMap [CorsConfig, !Ref stage, AllowMethods]
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key'"
        AllowOrigin: !FindInMap [CorsConfig, !Ref stage, AllowOrigin]

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup


